name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check file structure
      run: |
        ls -la
        test -f server.py
        test -f requirements.txt
        test -f knowledge_base/contracts.json
    
    - name: Test imports
      run: |
        python -c "import flask; print('Flask imported successfully')"
        python -c "import google.generativeai; print('Google Generative AI imported successfully')"
        python -c "from agent import PdfScorerAgent; print('Agent imported successfully')"
        python -c "from task import ScorePdfTask; print('Task imported successfully')"
        python -c "import tools; print('Tools imported successfully')"
    
    - name: Check knowledge base format
      run: |
        python -c "
        import json
        with open('knowledge_base/contracts.json', 'r') as f:
            data = json.load(f)
            print(f'Knowledge base loaded: {len(data)} contracts')
            for contract in data:
                print(f'  - {contract}')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check || true

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        echo "FROM python:3.10-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install -r requirements.txt
        COPY . .
        EXPOSE 5000
        ENV FLASK_ENV=production
        CMD [\"python\", \"server.py\"]" > Dockerfile
        
        docker build -t ai-services-platform .
    
    - name: Test Docker image
      run: |
        docker run --rm ai-services-platform python -c "
        import flask
        import google.generativeai
        from agent import PdfScorerAgent
        print('Docker image working correctly')
        "
